import { supabase, isSupabaseConfigured } from '../lib/supabase';
import toast from 'react-hot-toast';
import { ContentVersioningService } from './contentVersioningService';

export interface SyncEvent {
  id: string;
  type: 'content' | 'properties' | 'images' | 'design' | 'users' | 'config';
  action: 'create' | 'update' | 'delete';
  data: any;
  timestamp: string;
  adminId: string;
  adminName: string;
}

export class RealTimeSyncService {
  private static instance: RealTimeSyncService;
  private subscribers: Map<string, (event: SyncEvent) => void> = new Map();
  private channel: any = null;
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private pollingInterval: NodeJS.Timeout | null = null;

  static getInstance(): RealTimeSyncService {
    if (!RealTimeSyncService.instance) {
      RealTimeSyncService.instance = new RealTimeSyncService();
    }
    return RealTimeSyncService.instance;
  }

  // Initialiser la connexion temps r√©el
  async initialize(): Promise<void> {
    try {
      console.log('üîÑ Initialisation de la synchronisation temps r√©el...');
      
      // V√©rifier la configuration Supabase
      if (!isSupabaseConfigured) {
        console.warn('‚ö†Ô∏è Supabase non configur√© - mode local uniquement');
        this.isConnected = false;
        this.startPollingFallback();
        return;
      }
      
      // Synchroniser les donn√©es depuis Supabase au d√©marrage
      try {
        // Test de connectivit√© rapide avant sync
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 2000);
        
        await fetch(import.meta.env.VITE_SUPABASE_URL + '/rest/v1/', {
          method: 'HEAD',
          headers: { 'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY },
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        // Si la connectivit√© est OK, proc√©der √† la sync
        await ContentVersioningService.syncFromSupabaseToLocal();
        console.log('‚úÖ Synchronisation initiale depuis Supabase termin√©e');
      } catch (error) {
        if (error.name === 'AbortError') {
          console.warn('‚ö†Ô∏è Timeout connexion Supabase - mode hors ligne');
        } else if (error.message?.includes('Failed to fetch')) {
          console.warn('‚ö†Ô∏è Pas de connexion internet - mode hors ligne');
        } else {
          console.warn('‚ö†Ô∏è Erreur synchronisation initiale - mode hors ligne:', error);
        }
        
        // Passer en mode hors ligne
        this.isConnected = false;
        this.startPollingFallback();
        return;
      }
      
      try {
        // Cr√©er le canal Supabase pour les √©v√©nements temps r√©el
        this.channel = supabase
          .channel('collaborative_changes')
          .on('postgres_changes', {
            event: '*',
            schema: 'public',
            table: 'site_content_versions'
          }, (payload) => {
            console.log('üìù Changement contenu d√©tect√©:', payload);
            this.handleContentVersionChange(payload);
          })
          .on('postgres_changes', {
            event: '*',
            schema: 'public',
            table: 'properties_versions'
          }, (payload) => {
            console.log('üè† Changement propri√©t√©s d√©tect√©:', payload);
            this.handlePropertiesVersionChange(payload);
          })
          .on('postgres_changes', {
            event: '*',
            schema: 'public',
            table: 'presentation_images_versions'
          }, (payload) => {
            console.log('üñºÔ∏è Changement images d√©tect√©:', payload);
            this.handleImagesVersionChange(payload);
          })
          .on('postgres_changes', {
            event: '*',
            schema: 'public',
            table: 'design_settings_versions'
          }, (payload) => {
            console.log('üé® Changement design d√©tect√©:', payload);
            this.handleDesignVersionChange(payload);
          })
          .on('postgres_changes', {
            event: '*',
            schema: 'public',
            table: 'user_registrations'
          }, (payload) => {
            console.log('üë§ Changement utilisateur d√©tect√©:', payload);
            this.handleUserChange(payload);
          })
          .on('broadcast', { event: 'admin_change' }, (payload) => {
            console.log('üì° √âv√©nement admin re√ßu:', payload);
            this.handleSyncEvent(payload.payload as SyncEvent);
          })
          .subscribe((status) => {
            if (status === 'SUBSCRIBED') {
              this.isConnected = true;
              this.reconnectAttempts = 0;
              console.log('‚úÖ SYNCHRONISATION TEMPS R√âEL ACTIVE');
              
              // Arr√™ter le polling si actif
              if (this.pollingInterval) {
                clearInterval(this.pollingInterval);
                this.pollingInterval = null;
              }
              
              // Notifier les utilisateurs admin
              if (this.isAdminUser()) {
                toast.success('üü¢ Synchronisation collaborative ACTIVE', { 
                  id: 'sync-connected',
                  duration: 4000,
                  icon: 'üîÑ'
                });
              }
            } else if (status === 'CHANNEL_ERROR') {
              console.warn('‚ö†Ô∏è Erreur de canal Supabase - passage en mode polling');
              this.handleConnectionError();
            } else if (status === 'CLOSED') {
              console.warn('‚ö†Ô∏è Canal temps r√©el ferm√©');
              this.isConnected = false;
              this.startPollingFallback();
            }
          });
      } catch (channelError) {
        console.warn('‚ö†Ô∏è Impossible de cr√©er le canal Supabase:', channelError);
        this.handleConnectionError();
      }

    } catch (error) {
      console.error('‚ùå Erreur initialisation sync:', error);
      this.handleConnectionError();
    }
  }

  // G√©rer les changements de version de contenu
  private async handleContentVersionChange(payload: any): Promise<void> {
    if (payload.eventType === 'INSERT' && payload.new?.is_current) {
      console.log('üìù NOUVELLE VERSION DE CONTENU PUBLI√âE');
      
      try {
        // Synchroniser IMM√âDIATEMENT depuis Supabase
        const newContent = await ContentVersioningService.getCurrentSiteContent();
        if (newContent) {
          localStorage.setItem('siteContent', JSON.stringify(newContent));
          
          // Forcer la mise √† jour de TOUS les composants
          window.dispatchEvent(new CustomEvent('contentUpdated', { detail: newContent }));
          window.dispatchEvent(new CustomEvent('forceUpdate', { 
            detail: { type: 'content', source: 'supabase', timestamp: Date.now() } 
          }));
          
          // Notification pour TOUS les utilisateurs (pas seulement admin)
          toast.success(`üìù Contenu mis √† jour par ${payload.new.author_name}`, {
            duration: 6000,
            icon: 'üîÑ'
          });
          
          console.log('‚úÖ Contenu synchronis√© pour tous les utilisateurs');
        }
      } catch (error) {
        console.error('‚ùå Erreur sync contenu:', error);
      }
    }
  }

  // G√©rer les changements de version de propri√©t√©s
  private async handlePropertiesVersionChange(payload: any): Promise<void> {
    if (payload.eventType === 'INSERT' && payload.new?.is_current) {
      console.log('üè† NOUVELLE VERSION DE PROPRI√âT√âS PUBLI√âE');
      
      try {
        // Synchroniser TOUTES les propri√©t√©s depuis Supabase
        const newProperties = await ContentVersioningService.getCurrentProperties();
        if (newProperties.length > 0) {
          localStorage.setItem('properties', JSON.stringify(newProperties));
          
          // Forcer la mise √† jour de TOUS les composants
          window.dispatchEvent(new Event('storage'));
          window.dispatchEvent(new CustomEvent('forceUpdate', { 
            detail: { type: 'properties', source: 'supabase', timestamp: Date.now() } 
          }));
          
          // Notification pour TOUS les utilisateurs
          toast.success(`üè† Biens immobiliers mis √† jour par ${payload.new.author_name}`, {
            duration: 6000,
            icon: 'üè†'
          });
          
          console.log('‚úÖ Propri√©t√©s synchronis√©es pour tous les utilisateurs');
        }
      } catch (error) {
        console.error('‚ùå Erreur sync propri√©t√©s:', error);
      }
    }
  }

  // G√©rer les changements de version d'images
  private async handleImagesVersionChange(payload: any): Promise<void> {
    if (payload.eventType === 'INSERT' && payload.new?.is_current) {
      console.log('üñºÔ∏è NOUVELLES IMAGES PUBLI√âES');
      
      try {
        const category = payload.new.category;
        const newImages = await ContentVersioningService.getCurrentPresentationImages(category);
        
        if (newImages.length > 0) {
          localStorage.setItem(`${category}Images`, JSON.stringify(newImages));
          
          const activeImage = newImages.find((img: any) => img.isActive);
          if (activeImage) {
            if (category === 'hero') {
              window.dispatchEvent(new CustomEvent('presentationImageChanged', { detail: activeImage.url }));
            } else if (category === 'concept') {
              const siteContent = JSON.parse(localStorage.getItem('siteContent') || '{}');
              siteContent.concept = { ...siteContent.concept, image: activeImage.url };
              localStorage.setItem('siteContent', JSON.stringify(siteContent));
              window.dispatchEvent(new CustomEvent('contentUpdated', { detail: siteContent }));
            }
          }
          
          // Forcer la mise √† jour
          window.dispatchEvent(new CustomEvent('forceUpdate', { 
            detail: { type: 'images', source: 'supabase', timestamp: Date.now() } 
          }));
          
          // Notification pour TOUS les utilisateurs
          toast.success(`üñºÔ∏è Images ${category} mises √† jour par ${payload.new.author_name}`, {
            duration: 6000,
            icon: 'üé®'
          });
          
          console.log(`‚úÖ Images ${category} synchronis√©es pour tous les utilisateurs`);
        }
      } catch (error) {
        console.error('‚ùå Erreur sync images:', error);
      }
    }
  }

  // G√©rer les changements de version de design
  private async handleDesignVersionChange(payload: any): Promise<void> {
    if (payload.eventType === 'INSERT' && payload.new?.is_current) {
      console.log('üé® NOUVEAUX PARAM√àTRES DE DESIGN PUBLI√âS');
      
      try {
        const newDesignSettings = await ContentVersioningService.getCurrentDesignSettings();
        if (newDesignSettings) {
          localStorage.setItem('designSettings', JSON.stringify(newDesignSettings));
          
          // Appliquer imm√©diatement les variables CSS
          const root = document.documentElement;
          if (newDesignSettings.colors) {
            Object.entries(newDesignSettings.colors).forEach(([key, value]) => {
              root.style.setProperty(`--color-${key}`, value as string);
            });
          }
          
          // D√©clencher les √©v√©nements de mise √† jour
          window.dispatchEvent(new CustomEvent('designSettingsChanged', { detail: newDesignSettings }));
          window.dispatchEvent(new CustomEvent('forceUpdate', { 
            detail: { type: 'design', source: 'supabase', timestamp: Date.now() } 
          }));
          
          // Notification pour TOUS les utilisateurs
          toast.success(`üé® Design mis √† jour par ${payload.new.author_name}`, {
            duration: 6000,
            icon: 'üé®'
          });
          
          console.log('‚úÖ Design synchronis√© pour tous les utilisateurs');
        }
      } catch (error) {
        console.error('‚ùå Erreur sync design:', error);
      }
    }
  }

  // G√©rer les changements d'utilisateurs
  private handleUserChange(payload: any): void {
    console.log('üë§ Changement utilisateur d√©tect√©:', payload);
    
    const event: SyncEvent = {
      id: Date.now().toString(),
      type: 'users',
      action: payload.eventType === 'INSERT' ? 'create' : 
              payload.eventType === 'UPDATE' ? 'update' : 'delete',
      data: payload.new || payload.old,
      timestamp: new Date().toISOString(),
      adminId: 'system',
      adminName: 'Syst√®me'
    };
    
    this.handleSyncEvent(event);
  }

  // Diffuser un changement admin avec sauvegarde Supabase OBLIGATOIRE
  async broadcastChange(event: Omit<SyncEvent, 'id' | 'timestamp'>): Promise<void> {
    const fullEvent: SyncEvent = {
      ...event,
      id: Date.now().toString(),
      timestamp: new Date().toISOString()
    };

    try {
      console.log('üì§ Diffusion changement:', fullEvent.type, fullEvent.action);
      
      // 1. Tenter de sauvegarder dans Supabase
      try {
        await this.saveChangeToSupabase(fullEvent);
        console.log('‚úÖ Changement sauvegard√© dans Supabase');
      } catch (supabaseError) {
        console.warn('‚ö†Ô∏è Erreur sauvegarde Supabase, mode local activ√©:', supabaseError);
        // Continuer avec la sauvegarde locale
      }
      
      // 2. Diffuser via canal temps r√©el si connect√©
      if (this.isConnected && this.channel) {
        try {
          const result = await this.channel.send({
            type: 'broadcast',
            event: 'admin_change',
            payload: fullEvent
          });
          
          if (result === 'ok') {
            console.log('üì° Changement diffus√© en temps r√©el');
          } else {
            console.warn('‚ö†Ô∏è Diffusion temps r√©el √©chou√©e, mais sauvegard√©');
          }
        } catch (broadcastError) {
          console.warn('‚ö†Ô∏è Erreur diffusion temps r√©el:', broadcastError);
        }
      } else {
        console.log('üì¶ Pas de canal temps r√©el, mais sauvegard√© dans Supabase');
      }

      // 3. Appliquer imm√©diatement en local
      this.handleSyncEvent(fullEvent);
      
      // 4. Notification de succ√®s
      toast.success('‚úÖ Images mises √† jour avec succ√®s !', {
        duration: 3000,
        icon: 'üíæ'
      });

    } catch (error) {
      console.error('‚ùå Erreur diffusion changement:', error);
      
      // M√™me en cas d'erreur r√©seau, appliquer les changements localement
      this.handleSyncEvent(fullEvent);
      toast.success('‚úÖ Images sauvegard√©es localement (synchronisation diff√©r√©e)', {
        duration: 4000,
        icon: 'üì¶'
      });
    }
  }

  // Sauvegarder le changement directement dans Supabase
  private async saveChangeToSupabase(event: SyncEvent): Promise<void> {
    if (!isSupabaseConfigured) {
      throw new Error('Supabase non configur√© - impossible de synchroniser');
    }

    // V√©rifier l'authentification
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (!user && !localStorage.getItem('currentAdminId')) {
      console.warn('Aucune session Supabase active pour la synchronisation');
      // Ne pas faire √©chouer, juste avertir
      return;
    }

    try {
      const authorEmail = localStorage.getItem('currentAdminEmail') || 'nicolas.c@lacremerie.fr';
      
      // Sauvegarder selon le type de changement
      switch (event.type) {
        case 'content':
          await ContentVersioningService.saveContentVersion(
            event.data,
            event.adminName,
            authorEmail,
            'Modification collaborative du contenu'
          );
          break;
          
        case 'properties':
          if (event.action === 'create' || event.action === 'update') {
            await ContentVersioningService.savePropertyVersion(
              event.data,
              event.adminName,
              authorEmail,
              `Modification collaborative de ${event.data.name || 'propri√©t√©'}`
            );
          }
          break;
          
        case 'images':
          await ContentVersioningService.savePresentationImagesVersion(
            event.data.category,
            event.data.images,
            event.adminName,
            authorEmail,
            'Modification collaborative des images'
          );
          break;
          
        case 'design':
          await ContentVersioningService.saveDesignSettingsVersion(
            event.data,
            event.adminName,
            authorEmail,
            'Modification collaborative du design'
          );
          break;
      }
      
      console.log('‚úÖ Changement sauvegard√© dans Supabase via HTTPS');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur sauvegarde Supabase, mode local activ√©:', error);
      // Ne pas faire √©chouer la synchronisation pour des probl√®mes d'auth
    }
  }

  // G√©rer les √©v√©nements de synchronisation
  private handleSyncEvent(event: SyncEvent): void {
    console.log('üì° Traitement √©v√©nement sync:', event.type, event.action);
    
    try {
      // Appliquer les changements selon le type
      switch (event.type) {
        case 'content':
          this.handleContentUpdate(event);
          break;
        case 'properties':
          this.handlePropertiesUpdate(event);
          break;
        case 'images':
          this.handleImagesUpdate(event);
          break;
        case 'design':
          this.handleDesignUpdate(event);
          break;
        case 'users':
          this.handleUsersUpdate(event);
          break;
      }

      // Notifier tous les abonn√©s
      this.subscribers.forEach(callback => {
        try {
          callback(event);
        } catch (error) {
          console.error('‚ùå Erreur callback subscriber:', error);
        }
      });

      // Notification utilisateur (sauf pour l'admin qui a fait le changement)
      if (!this.isCurrentAdmin(event.adminId)) {
        this.showUpdateNotification(event);
      }

    } catch (error) {
      console.error('‚ùå Erreur traitement √©v√©nement sync:', error);
    }
  }

  // Gestion des mises √† jour de contenu
  private handleContentUpdate(event: SyncEvent): void {
    if (event.action === 'update') {
      localStorage.setItem('siteContent', JSON.stringify(event.data));
      window.dispatchEvent(new CustomEvent('contentUpdated', { detail: event.data }));
      this.forceComponentUpdate('content');
    }
  }

  // Gestion des mises √† jour de propri√©t√©s
  private handlePropertiesUpdate(event: SyncEvent): void {
    const currentProperties = JSON.parse(localStorage.getItem('properties') || '[]');
    
    switch (event.action) {
      case 'create':
        const updatedProperties = [...currentProperties, event.data];
        localStorage.setItem('properties', JSON.stringify(updatedProperties));
        break;
      case 'update':
        const modifiedProperties = currentProperties.map((p: any) => 
          p.id === event.data.id ? event.data : p
        );
        localStorage.setItem('properties', JSON.stringify(modifiedProperties));
        break;
      case 'delete':
        const filteredProperties = currentProperties.filter((p: any) => p.id !== event.data.id);
        localStorage.setItem('properties', JSON.stringify(filteredProperties));
        break;
    }
    
    window.dispatchEvent(new Event('storage'));
    this.forceComponentUpdate('properties');
  }

  // Gestion des mises √† jour d'images
  private handleImagesUpdate(event: SyncEvent): void {
    if (event.data.category === 'hero') {
      localStorage.setItem('presentationImages', JSON.stringify(event.data.images));
      window.dispatchEvent(new CustomEvent('presentationImageChanged', { 
        detail: event.data.activeImage 
      }));
    } else if (event.data.category === 'concept') {
      localStorage.setItem('conceptImages', JSON.stringify(event.data.images));
      const siteContent = JSON.parse(localStorage.getItem('siteContent') || '{}');
      siteContent.concept = { ...siteContent.concept, image: event.data.activeImage };
      localStorage.setItem('siteContent', JSON.stringify(siteContent));
      window.dispatchEvent(new CustomEvent('contentUpdated', { detail: siteContent }));
    }
    this.forceComponentUpdate('images');
  }

  // Gestion des mises √† jour de design
  private handleDesignUpdate(event: SyncEvent): void {
    if (event.action === 'update') {
      localStorage.setItem('designSettings', JSON.stringify(event.data));
      
      // Appliquer imm√©diatement les variables CSS
      const root = document.documentElement;
      if (event.data.colors) {
        Object.entries(event.data.colors).forEach(([key, value]) => {
          root.style.setProperty(`--color-${key}`, value as string);
        });
      }
      
      window.dispatchEvent(new CustomEvent('designSettingsChanged', { detail: event.data }));
      this.forceComponentUpdate('design');
    }
  }

  // Gestion des mises √† jour d'utilisateurs
  private handleUsersUpdate(event: SyncEvent): void {
    window.dispatchEvent(new CustomEvent('usersUpdated', { detail: event }));
    this.forceComponentUpdate('users');
  }

  // Forcer la mise √† jour des composants React
  private forceComponentUpdate(type: string): void {
    // D√©clencher un √©v√©nement global pour forcer le re-render
    window.dispatchEvent(new CustomEvent('forceUpdate', { 
      detail: { type, timestamp: Date.now() } 
    }));
    
    console.log(`üîÑ Mise √† jour forc√©e des composants: ${type}`);
  }

  // Fallback avec polling pour mode hors ligne
  private startPollingFallback(): void {
    console.log('üîÑ Mode POLLING activ√© (fallback)');
    
    // V√©rifier les changements toutes les 10 secondes
    this.pollingInterval = setInterval(async () => {
      try {
        if (isSupabaseConfigured) {
          // Tenter de synchroniser depuis Supabase
          await ContentVersioningService.syncFromSupabaseToLocal();
          
          // D√©clencher les mises √† jour
          window.dispatchEvent(new CustomEvent('forceUpdate', { 
            detail: { type: 'all', source: 'polling', timestamp: Date.now() } 
          }));
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur polling sync:', error);
      }
    }, 10000);
  }

  // Afficher une notification de mise √† jour
  private showUpdateNotification(event: SyncEvent): void {
    const messages = {
      content: 'üìù Contenu mis √† jour',
      properties: 'üè† Biens immobiliers mis √† jour',
      images: 'üñºÔ∏è Images mises √† jour',
      design: 'üé® Design mis √† jour',
      users: 'üë§ Utilisateurs mis √† jour',
      config: '‚öôÔ∏è Configuration mise √† jour'
    };

    const message = messages[event.type] || 'üîÑ Mise √† jour effectu√©e';
    
    toast.success(`${message} par ${event.adminName}`, {
      duration: 5000,
      icon: 'üîÑ'
    });
  }

  // S'abonner aux changements
  subscribe(id: string, callback: (event: SyncEvent) => void): void {
    this.subscribers.set(id, callback);
    console.log(`üìù Abonnement ajout√©: ${id} (${this.subscribers.size} total)`);
  }

  // Se d√©sabonner
  unsubscribe(id: string): void {
    this.subscribers.delete(id);
    console.log(`üìù Abonnement supprim√©: ${id} (${this.subscribers.size} restant)`);
  }

  // V√©rifier si c'est un utilisateur admin
  private isAdminUser(): boolean {
    try {
      return localStorage.getItem('adminLoggedIn') === 'true';
    } catch {
      return false;
    }
  }

  // V√©rifier si c'est l'admin actuel
  private isCurrentAdmin(adminId: string): boolean {
    try {
      const currentAdminEmail = localStorage.getItem('currentAdminEmail');
      return currentAdminEmail === 'nicolas.c@lacremerie.fr' && adminId === 'current-admin';
    } catch {
      return false;
    }
  }

  // G√©rer les erreurs de connexion
  private handleConnectionError(): void {
    this.isConnected = false;
    console.log('‚ö†Ô∏è Passage en mode polling (erreur connexion)');
    
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
      
      console.log(`üîÑ Tentative de reconnexion ${this.reconnectAttempts}/${this.maxReconnectAttempts} dans ${delay}ms`);
      
      setTimeout(() => {
        this.initialize();
      }, delay);
    } else {
      console.warn('‚ö†Ô∏è Mode polling permanent activ√©');
      this.startPollingFallback();
      
      if (this.isAdminUser()) {
        toast('üü° Mode synchronisation polling activ√©', {
          duration: 4000,
          icon: '‚ö†Ô∏è'
        });
      }
    }
  }

  // Reconnecter manuellement
  async reconnect(): Promise<void> {
    console.log('üîÑ Reconnexion manuelle...');
    this.reconnectAttempts = 0;
    
    // Nettoyer l'ancien canal
    if (this.channel) {
      supabase.removeChannel(this.channel);
      this.channel = null;
    }
    
    // Arr√™ter le polling
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
    
    await this.initialize();
  }

  // Obtenir le statut de connexion
  getConnectionStatus(): { connected: boolean; subscribers: number } {
    return {
      connected: this.isConnected,
      subscribers: this.subscribers.size
    };
  }

  // Nettoyer les ressources
  cleanup(): void {
    if (this.channel) {
      supabase.removeChannel(this.channel);
      this.channel = null;
    }
    
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
    
    this.subscribers.clear();
    this.isConnected = false;
    console.log('üßπ Service de synchronisation nettoy√©');
  }
}

// Instance globale
export const syncService = RealTimeSyncService.getInstance();