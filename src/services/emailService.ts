import toast from 'react-hot-toast';
import type { UserRegistration } from '../types/database';

export class EmailService {
  static getEmailSettings() {
    const settings = localStorage.getItem('emailSettings');
    return settings ? JSON.parse(settings) : {
      autoReply: true,
      welcomeEmail: true,
      adminNotification: true,
      emailTemplate: `Bonjour {prenom} {nom},

Merci pour votre inscription sur OFF MARKET.

Nous sommes ravis de vous compter parmi nos clients privil√©gi√©s. Vous recevrez prochainement des informations exclusives sur nos biens immobiliers de prestige en off-market.

Notre √©quipe vous contactera sous peu pour discuter de vos projets immobiliers.

Cordialement,
L'√©quipe OFF MARKET

---
Ce message a √©t√© envoy√© automatiquement. Pour toute question, contactez-nous √† nicolas.c@lacremerie.fr`
    };
  }

  private static replaceTemplateVariables(template: string, user: UserRegistration): string {
    return template
      .replace(/{prenom}/g, user.prenom)
      .replace(/{nom}/g, user.nom)
      .replace(/{email}/g, user.email)
      .replace(/{telephone}/g, user.telephone);
  }

  static async sendWelcomeEmail(user: UserRegistration): Promise<void> {
    const settings = this.getEmailSettings();
    
    if (!settings.welcomeEmail) {
      return;
    }

    try {
      // Simulation d'envoi d'email (en production, utilisez un service comme SendGrid, Mailgun, etc.)
      const emailContent = this.replaceTemplateVariables(settings.emailTemplate, user);
      
      // Ici vous int√©greriez votre service d'email r√©el
      console.log('Envoi email de bienvenue √†:', user.email);
      console.log('Contenu:', emailContent);
      
      // Simulation d'un d√©lai d'envoi
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast.success(`Email de bienvenue envoy√© √† ${user.prenom} ${user.nom}`);
    } catch (error) {
      console.error('Erreur envoi email:', error);
      toast.error('Erreur lors de l\'envoi de l\'email de bienvenue');
    }
  }

  static async sendAdminNotification(user: UserRegistration): Promise<void> {
    const settings = this.getEmailSettings();
    
    if (!settings.adminNotification) {
      return;
    }

    try {
      // Email de notification pour l'admin
      const adminEmail = 'nicolas.c@lacremerie.fr';
      const subject = `OFF MARKET - Nouvelle inscription - ${user.prenom} ${user.nom}`;
      const content = `
Nouvelle inscription sur le site OFF MARKET :

Nom : ${user.nom}
Pr√©nom : ${user.prenom}
Email : ${user.email}
T√©l√©phone : ${user.telephone}
Date : ${user.created_at ? new Date(user.created_at).toLocaleString('fr-FR') : 'Non disponible'}

---
Notification automatique du syst√®me
      `;

      console.log('Envoi notification admin √†:', adminEmail);
      console.log('Sujet:', subject);
      console.log('Contenu:', content);
      
      // Simulation d'un d√©lai d'envoi
      await new Promise(resolve => setTimeout(resolve, 500));
      
      toast.success('Notification admin envoy√©e');
    } catch (error) {
      console.error('Erreur notification admin:', error);
      toast.error('Erreur lors de l\'envoi de la notification admin');
    }
  }

  static async sendTestEmail(email: string): Promise<void> {
    try {
      const testUser: UserRegistration = {
        id: 'test-id',
        nom: 'Test',
        prenom: 'Utilisateur',
        email: email,
        telephone: '01 23 45 67 89',
        created_at: new Date().toISOString()
      };

      await this.sendWelcomeEmail(testUser);
    } catch (error) {
      console.error('Erreur test email:', error);
      toast.error('Erreur lors de l\'envoi de l\'email de test');
    }
  }

  static async sendContactNotification(contactData: any): Promise<void> {
    const settings = this.getEmailSettings();
    
    if (!settings.adminNotification) {
      console.log('Admin notifications disabled');
      return;
    }

    try {
      // Email de notification pour Nicolas
      const adminEmail = 'nicolas.c@lacremerie.fr';
      const subject = `CERCLE PRIV√â - Nouveau message de contact - ${contactData.prenom} ${contactData.nom}`;
      const content = `
Nouveau message de contact sur le site CERCLE PRIV√â :

Nom : ${contactData.nom}
Pr√©nom : ${contactData.prenom}
Email : ${contactData.email}
T√©l√©phone : ${contactData.telephone || 'Non renseign√©'}

Message :
${contactData.message}

Date : ${new Date().toLocaleString('fr-FR')}

---
Notification automatique du syst√®me CERCLE PRIV√â
      `;

      console.log('Envoi notification contact √† Nicolas:', adminEmail);
      console.log('Sujet:', subject);
      console.log('Contenu:', content);
      
      // Simulation d'un d√©lai d'envoi
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast.success('üìß Notification envoy√©e √† Nicolas');
    } catch (error) {
      console.error('Erreur notification contact:', error);
      toast.error('Erreur lors de l\'envoi de la notification');
    }
  }
}